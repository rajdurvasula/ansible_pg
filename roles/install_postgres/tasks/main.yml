---
#
# Task to install PostgreSQL
#
#

- name: Make downloads directory
  file:
    path: "{{common.downloads}}"
    owner: root
    group: root
    state: directory
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Install Postgres rpms
  yum:
    name: "{{packages}}"
    state: present
  vars:
    packages:
      - postgresql
      - postgresql-server
      - postgresql-devel
      - postgresql-contrib
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Make data directory
  file:
    path: "{{postgres.data_dir}}"
    owner: "{{postgres.user_name}}"
    group: "{{postgres.group_name}}"
    state: directory
    recurse: yes
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Set ownership to db mountpoint
  file:
    path: "{{common.db_mountpoint}}"
    owner: "{{postgres.user_name}}"
    group: "{{postgres.group_name}}"
    state: directory
    recurse: yes
  become: true
  become_method: sudo
  when:
    - postgres_db_mountpoint_exists == "yes"
  tags:
    - install_postgres

- name: Check .bash_profile exists in postgres home
  stat:
    path: "{{postgres.home}}/.bash_profile"
  register: postgres_bashprofile_status
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Create .bash_profile in postgres home
  template:
    src: bash_profile.j2
    dest: "{{postgres.home}}/.bash_profile"
  become: true
  become_method: sudo
  when:
    - not postgres_bashprofile_status.stat.exists
  tags:
    - install_postgres

- name: Check .bash_profile exists in root
  stat:
    path: "/root/.bash_profile"
  register: root_bashprofile_status
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Create .bash_profile in root
  template:
    src: bash_profile.j2
    dest: "/root/.bash_profile"
  become: true
  become_method: sudo
  when:
    - not root_bashprofile_status.stat.exists
  tags:
    - install_postgres
 
- name: Set env variable PG_DATA
  lineinfile:
    path: "{{item}}"
    line: "export PGDATA={{postgres.data_dir}}"
    insertafter: EOF
  become: true
  become_method: sudo
  with_items:
    - "/root/.bash_profile"
    - "{{postgres.home}}/.bash_profile"
  tags:
    - install_postgres

- name: Update env variables with PostgreSQL shared libraries
  lineinfile:
    path: "{{item}}"
    line: "export LD_LIBRARY_PATH={{postgres.bin_home}}/lib:$LD_LIBRARY_PATH"
    insertafter: EOF
  become: true
  become_method: sudo
  with_items:
    - "/root/.bash_profile"
    - "{{postgres.home}}/.bash_profile"
  tags:
    - install_postgres

- name: Update PATH env varible with PostgreSQL path
  lineinfile:
    path: "{{item}}"
    line: "export PATH=$PATH:{{postgres.bin_home}}/bin"
    insertafter: EOF
  become: true
  become_method: sudo
  with_items:
    - "/root/.bash_profile"
    - "{{postgres.home}}/.bash_profile"
  tags:
    - install_postgres

- name: Initialize Database
  shell: |
    service "{{postgres.service_name}}" initdb
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Listen on all Network Interfaces
  lineinfile:
    path: "{{postgres.data_dir}}/postgresql.conf"
    regexp: "^#listen_addresses"
    insertafter: "^#listen_addresses"
    line: "listen_addresses = '*'"
  become: true
  become_user: "{{postgres.user_name}}"
  tags:
    - install_postgres

- name: Backup pg_hba.conf
  copy:
    src: "{{postgres.data_dir}}/pg_hba.conf"
    dest: "{{postgres.data_dir}}/pg_hba.conf.orig"
    owner: "{{postgres.user_name}}"
    group: "{{postgres.group_name}}"
    remote_src: yes
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Allow remote connections
  template:
    src: pg_hba.conf.j2
    dest: "{{postgres.data_dir}}/pg_hba.conf"
    owner: "{{postgres.user_name}}"
    group: "{{postgres.group_name}}"
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Restart PostgreSQL service
  service:
    name: "{{postgres.service_name}}"
    state: restarted
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Touch postgres password script file
  file:
    path: "{{postgres.home}}/set_postgres_password.sql"
    state: touch
    owner: "{{postgres.user_name}}"
    group: "{{postgres.group_name}}"
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Prepare postgres password script
  lineinfile:
    path: "{{postgres.home}}/set_postgres_password.sql"
    line: "ALTER USER {{postgres.user_name}} with encrypted password '{{postgres.password}}';"
    insertafter: EOF
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Configure postgres password
  shell: |
    source "{{postgres.home}}/.bash_profile" ;
    "{{postgres.bin_home}}/bin/psql" -f "{{postgres.home}}/set_postgres_password.sql"
  args:
    executable: /bin/bash
  become: true
  become_user: "{{postgres.user_name}}"
  tags:
    - install_postgres

- name: Delete temporary files
  file:
    path: "{{postgres.home}}/set_postgres_password.sql"
    state: absent
  become: true
  become_method: sudo
  tags:
    - install_postgres

- name: Get iptables status
  shell: |
    service iptables status | grep "running"
  args:
    executable: /bin/bash
  become: true
  become_method: sudo
  register: iptables_status
  tags:
    - install_postgres

- name: Allow traffic for PostgreSQL
  iptables:
    chain: INPUT
    protocol: tcp
    match: tcp
    to_ports: "{{postgres.port}}"
    policy: ACCEPT
    action: append
    state: present
  become: true
  become_method: sudo
  when:
    - iptables_status == "running"
  tags:
    - install_postgres

- name: Commit iptables
  command: iptables-save
  become: true
  become_method: sudo
  when:
    - iptables_status == "running"
  tags:
    - install_postgres

- name: Restart iptables
  service:
    name: iptables
    state: restarted
  become: true
  become_method: sudo
  when:
    - iptables_status == "running"
  tags:
    - install_postgres
